

#include "Adafruit_SSD1306/Adafruit_SSD1306.h"
#include <blynk.h>
#define BLYNK_PRINT Serial  
#define OLED_DC A1 
#define OLED_CS A2
#define OLED_RESET A0
Adafruit_SSD1306 display(OLED_DC, OLED_RESET, OLED_CS);
//SYSTEM_THREAD(ENABLED);
const unsigned char snakebitmap [] = {
0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x03, 0x80, 0x01, 0xF6, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7C, 0x00, 0x00, 0x00, 0x18, 0x0E, 0x00, 0x07, 0x80, 0x1B, 0xE2, 0x00, 0x00, 0x00, 0x00,
0x01, 0xFC, 0x06, 0x03, 0xE0, 0x78, 0x3E, 0x03, 0x1F, 0xC1, 0xF6, 0x02, 0x00, 0x00, 0x00, 0x00,
0x03, 0xFC, 0x0F, 0x03, 0xE1, 0xFC, 0x7E, 0x07, 0x9F, 0xEB, 0xE0, 0x02, 0x00, 0x00, 0x00, 0x00,
0x03, 0xFE, 0x3F, 0x03, 0xE1, 0xFC, 0xFE, 0x07, 0xCF, 0xFE, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFE, 0x3F, 0x07, 0xE3, 0xFC, 0x7E, 0x0F, 0xCE, 0xC0, 0x04, 0x3E, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xFC, 0x3F, 0x87, 0xC3, 0xFC, 0x3F, 0x1F, 0xBC, 0xC0, 0x0E, 0x74, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xE0, 0x3F, 0x87, 0xC7, 0xFC, 0x0F, 0x3F, 0x70, 0xC0, 0x3C, 0x20, 0x00, 0x00, 0x00, 0x00,
0x1F, 0xC0, 0x7F, 0xC7, 0xC7, 0xFE, 0x06, 0x7E, 0xF0, 0x60, 0x36, 0x20, 0x00, 0x00, 0x00, 0x00,
0x3F, 0x00, 0x7F, 0xC7, 0xC7, 0x9E, 0x37, 0xFC, 0xF0, 0x3E, 0x26, 0x20, 0x00, 0x00, 0x00, 0x00,
0x3E, 0x00, 0x7F, 0xC7, 0xC7, 0x1E, 0xF7, 0xFC, 0xF0, 0x16, 0x36, 0x20, 0x00, 0x00, 0x00, 0x00,
0x7C, 0x00, 0x7D, 0xE7, 0xCF, 0x9F, 0xFB, 0xF8, 0xE7, 0x06, 0x36, 0x20, 0x00, 0x00, 0x00, 0x00,
0x78, 0x01, 0x39, 0xE7, 0xDF, 0x0F, 0xFB, 0xF0, 0xFF, 0x86, 0x36, 0x20, 0x00, 0x00, 0x00, 0x00,
0xF8, 0x3F, 0x9D, 0xF7, 0x9F, 0x1F, 0xE3, 0xE0, 0x7E, 0x06, 0x36, 0x20, 0x00, 0x00, 0x00, 0x00,
0xFB, 0xFF, 0xDC, 0xFF, 0x9F, 0x3F, 0x87, 0xF0, 0xFC, 0x06, 0x36, 0x3C, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xFF, 0xDC, 0xFF, 0xDF, 0xFF, 0x0F, 0xF8, 0x78, 0x86, 0x26, 0x7E, 0x00, 0x00, 0x00, 0x00,
0x7E, 0x0F, 0xDC, 0x7F, 0xBF, 0xFF, 0x8F, 0xFC, 0x39, 0xE6, 0x3C, 0x02, 0x00, 0x00, 0x00, 0x00,
0x4C, 0x0F, 0xDC, 0x3F, 0x3F, 0xCF, 0xCF, 0xFE, 0x3F, 0xE6, 0x78, 0x02, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3F, 0xBC, 0x3F, 0xBE, 0x07, 0xCF, 0x3F, 0x3F, 0xCE, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xBC, 0x1C, 0x3E, 0x06, 0x0F, 0x9E, 0x1F, 0x1C, 0x00, 0xBE, 0x00, 0x00, 0x00, 0x00,
0x00, 0xFF, 0x3C, 0x18, 0x7E, 0x00, 0x67, 0x8C, 0x1E, 0x60, 0x01, 0xF4, 0x00, 0x00, 0x00, 0x00,
0x03, 0xFE, 0x70, 0x00, 0xFC, 0x01, 0xB1, 0x80, 0x18, 0x60, 0x2F, 0xA0, 0x00, 0x00, 0x00, 0x00,
0x0F, 0xFC, 0xE0, 0x00, 0xB0, 0x07, 0x10, 0x00, 0x00, 0x61, 0x7D, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3F, 0xF8, 0x00, 0x00, 0x07, 0x3C, 0xEE, 0xE0, 0x00, 0x33, 0xE8, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3F, 0xF0, 0x00, 0x00, 0x0D, 0xE9, 0xC3, 0xF0, 0x00, 0x1F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3F, 0x80, 0x00, 0x00, 0x1A, 0x63, 0x80, 0x18, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x3F, 0x00, 0x00, 0x00, 0x0B, 0x07, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x18, 0x00, 0x00, 0xFF, 0xE1, 0x88, 0xC7, 0x8C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x10, 0x00, 0x05, 0xFF, 0xE4, 0x32, 0x0F, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x0F, 0x00, 0x7C, 0x23, 0x09, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0xF8, 0x03, 0x40, 0x00, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x0B, 0xC0, 0x03, 0xC7, 0xC0, 0x01, 0x8F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x1E, 0x00, 0x3F, 0x3F, 0xF1, 0xFE, 0x7F, 0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x30, 0x07, 0xEB, 0x00, 0x07, 0x7C, 0x20, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x60, 0x3C, 0x41, 0xE0, 0x0E, 0x60, 0x60, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x5E, 0xAC, 0x00, 0xE4, 0xB0, 0xC0, 0xF8, 0x6D, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x75, 0xEF, 0x00, 0x5F, 0x53, 0x81, 0xA3, 0xD3, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xEC, 0xBB, 0x00, 0x4B, 0x0F, 0x03, 0x06, 0x80, 0x1C, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0xC7, 0xB6, 0x00, 0x3B, 0x06, 0x06, 0x1C, 0x00, 0x07, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00,
0x01, 0x80, 0xC6, 0x00, 0x07, 0x0C, 0x0C, 0x60, 0x17, 0xC1, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00,
0x07, 0x08, 0xFB, 0x00, 0x0F, 0x18, 0x18, 0xC0, 0xFF, 0xE0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00,
0x1E, 0x03, 0xFB, 0xFF, 0x99, 0x30, 0x31, 0x83, 0xB8, 0xF0, 0x98, 0x40, 0x00, 0x00, 0x00, 0x00,
0x30, 0xE3, 0xC7, 0xFF, 0xC2, 0x60, 0x63, 0x07, 0x98, 0x90, 0x5C, 0x20, 0x00, 0x00, 0x00, 0x00,
0x21, 0xB0, 0x06, 0x00, 0xC0, 0xC0, 0xC6, 0x0D, 0xC8, 0xD8, 0xDE, 0x30, 0x00, 0x00, 0x00, 0x00,
0x23, 0x90, 0x00, 0x00, 0xC1, 0x81, 0x84, 0x19, 0x18, 0xF8, 0x43, 0x08, 0x00, 0x00, 0x00, 0x00,
0x26, 0x80, 0x00, 0x83, 0x83, 0x03, 0x0C, 0x36, 0xF8, 0xFA, 0x69, 0x1C, 0x00, 0x00, 0x00, 0x00,
0x21, 0x81, 0xFE, 0x7F, 0x86, 0x06, 0x08, 0x64, 0xFF, 0xF0, 0xF9, 0x12, 0x00, 0x00, 0x00, 0x00,
0x21, 0xD5, 0xDF, 0xFC, 0x8C, 0x0C, 0x18, 0xCC, 0x2F, 0xFF, 0x83, 0x0C, 0x00, 0x00, 0x00, 0x00,
0x18, 0x7F, 0xC9, 0x01, 0x18, 0x19, 0xC8, 0x46, 0x80, 0x1E, 0x07, 0x8C, 0x00, 0x00, 0x00, 0x00,
0x1C, 0x3F, 0xCA, 0x26, 0x10, 0x33, 0xE8, 0x66, 0x40, 0x00, 0x1B, 0xCC, 0x00, 0x00, 0x00, 0x00,
0x03, 0x97, 0xE4, 0x30, 0xB0, 0x67, 0xC8, 0x32, 0x7C, 0x01, 0xE7, 0x86, 0x00, 0x00, 0x00, 0x00,
0x01, 0xC7, 0xE8, 0x11, 0x20, 0xCF, 0xCC, 0x19, 0x7F, 0xFB, 0x67, 0xC6, 0x00, 0x00, 0x00, 0x00,
0x00, 0x61, 0xF9, 0xDF, 0x60, 0x9F, 0xE6, 0x0C, 0x83, 0xFE, 0x57, 0xE6, 0x00, 0x00, 0x00, 0x00,
0x07, 0x30, 0xC6, 0x5E, 0x41, 0x9F, 0xF3, 0x06, 0x40, 0x00, 0x87, 0xE6, 0x00, 0x00, 0x00, 0x00,
0x3F, 0x98, 0xCE, 0xCF, 0x41, 0x9F, 0xF9, 0x83, 0x20, 0x00, 0x27, 0xE6, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xCC, 0x3F, 0xAE, 0x41, 0xC7, 0xFC, 0xD9, 0x9E, 0x03, 0x6D, 0xE6, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xE6, 0x3E, 0x2F, 0x41, 0x70, 0x3E, 0x70, 0x8F, 0x76, 0xCC, 0xE6, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF3, 0x1F, 0xCE, 0x40, 0x1F, 0x80, 0xE0, 0xD1, 0xFA, 0x2E, 0x64, 0x00, 0x00, 0x00, 0x00,
0xFF, 0xF9, 0xEF, 0x9F, 0x60, 0x0F, 0xC1, 0xC0, 0x40, 0x00, 0x19, 0x68, 0x00, 0x00, 0x00, 0x00,
0x7F, 0xFC, 0x0E, 0x3F, 0x30, 0x00, 0x7F, 0x00, 0xD6, 0x03, 0xC0, 0x93, 0x00, 0x00, 0x00, 0x00,
0x3F, 0xFE, 0x06, 0x3F, 0x9E, 0x00, 0x00, 0x01, 0x83, 0x76, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,
0x03, 0xFF, 0xF7, 0x3F, 0xC3, 0xE0, 0x00, 0x0F, 0x20, 0x00, 0x1F, 0xF4, 0x00, 0x00, 0x00, 0x00,
0x00, 0x7F, 0xF6, 0x9F, 0xF9, 0xBF, 0xFF, 0xFA, 0x7C, 0x01, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x31, 0x50, 0x5B, 0xB8, 0x1F, 0xFF, 0xF0, 0x77, 0xFF, 0x7E, 0x00, 0x00, 0x00, 0x00, 0x00
};
char auth[] = "zXwdjd6PyWK1yo4oR0WkFLlDzjQkR2NL";

void Menu_and_Preset();
void newGame();
void endGame();
void highScore();
void moveUp();
void moveDown();
void moveLeft();
void moveRight();

struct snake 
{
    int x;
    int y;
};
struct snake snakeObj[100] = {0};
struct snake food; 
 


int state = 0;
int choose_menu = 1;
int speed = 200;

int len = 4;
int personScore = 0;

const size_t size = 5; // max high scores displayed 
int scoreList[size] = {0}; 

int xButton = 1; // move right initially
int yButton = 0;
Timer timer(speed, print_every_second);


void setup()
{
        Serial.begin(9600);

    pinMode(D3, INPUT_PULLDOWN); // -> mode = RISING
    pinMode(D5, INPUT_PULLDOWN);
    pinMode(D6, INPUT_PULLDOWN);
    pinMode(D7, INPUT_PULLDOWN);
    pinMode(D4, INPUT_PULLDOWN);
    pinMode(D2, INPUT_PULLDOWN);

    attachInterrupt(D3, moveUp, RISING, 1); // highest priority
    attachInterrupt(D5, moveDown, RISING, 2);
    attachInterrupt(D6, moveLeft, RISING, 4);
    attachInterrupt(D7, moveRight, RISING, 3);

    display.begin(SSD1306_SWITCHCAPVCC);

}




void loop()
{
    if (state == 0){
        Menu_and_Preset();
          if(digitalRead(D4) == HIGH){
            state = choose_menu;
            display.clearDisplay();
          }
    }
    else if(state == 1){
            timer.start();
            state = 4;
    }
    else if(state == 2){
        highScore();
    }
    else if(state == 3){
        Set_speed();
    }
    else if(state == 4){
        
    }
    else if (state == 6){
        endGame(personScore);
    }
    delay(200);
}
void Set_speed(){
        if (digitalRead(D4) == HIGH) // if Left, return to menu
        {
            state = 0;
        }
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        
        display.setCursor(0, 0);
        display.print("Speed: ");
        speed = choose_menu*200;
        timer.changePeriod(speed); 
        timer.stop();
        display.println(choose_menu*200, DEC); // same line
        display.display();
}

void Menu_and_Preset()
{
    snakeObj[100] = {0};
    snakeObj[0].x = 5;
    snakeObj[0].y = 5;
        food.x = rand() % 31 + 1;
        food.y = rand() % 11 + 3;
    len = 4;    
    personScore = 0;
    // for next game

    // GUI
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.drawBitmap(0, 0, snakebitmap,128   , 64, 1),
    display.setCursor(95, 23);
    display.println("Game");
    display.setCursor(95, 31);
    display.println("Score");
    display.setCursor(95, 39);
    display.println("Speed");
    
    display.fillRect(91, 17+choose_menu*8, 3, 3, true); 
    display.display();

}    

void newGame()
{
    for(int i = 0; i<128;i++){
        display.fillRect(i,0,1,1,1);
        display.fillRect(i,63,1,1,1);
    }
    for(int i = 0; i<64;i++){
        display.fillRect(0,i,1,1,1);
        display.fillRect(127,i,1,1,1);
    }
    display.fillRect(food.x * 4, food.y * 4, 4, 4, true); 
    
    for (int i = len; i > 0; --i)
    {   // 1 update per loop
        snakeObj[i].x = snakeObj[i - 1].x;
        snakeObj[i].y = snakeObj[i - 1].y;
        display.fillRect(snakeObj[i].x * 4, snakeObj[i].y * 4, 4, 4, true); 
    }

    snakeObj[0].x += xButton; // snake's head
    snakeObj[0].y += yButton;
    
    // check over-border length-wise
    if (snakeObj[0].x == 0)
        snakeObj[0].x = 30;
    else if (snakeObj[0].x == 31)
        snakeObj[0].x = 1;

    // check over-border height-wise
    if (snakeObj[0].y == 0)
        snakeObj[0].y = 14;
    else if (snakeObj[0].y == 15)
        snakeObj[0].y = 1;
    
    if ((snakeObj[0].x != food.x) || (snakeObj[0].y != food.y))
    {   // if not eating
        display.fillRect(snakeObj[len].x * 4, snakeObj[len].y * 4, 4, 4, false); // false = remove last obj/pxl
    }
    else // else ++len + new food
    {
        ++personScore;
        len += 2;
        food.x = rand() % 31 + 1;
        food.y = rand() % 11 + 3;
    }
    display.fillRect(snakeObj[0].x * 4, snakeObj[0].y * 4, 4, 4, true);

    // self-collision
    for (int idx = 4; idx <= len; ++idx) // minimum 3 steps to self-collide
    {
        if ((snakeObj[0].x == snakeObj[idx].x) && (snakeObj[0].y == snakeObj[idx].y))
        {
            state = 6;
            timer.stop();
        }
    }   
    if(digitalRead(D2) == HIGH){
        state = 6;
            timer.stop();
    }
    display.display();

}

void endGame(int scoreIn) {
    int check = 0;
    for (int i = size - 1; i >= 0; i--)
    {
        if (scoreIn >= scoreList[i])
        {
            scoreList[i] = scoreIn;
            check = 1;
        }
        if (check = 1)
        break;
    }

    if(digitalRead(D4) == HIGH)
    {
        state = 0;
    }
    
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    
    display.setCursor(0, 0);
    display.print("Score: ");
    display.println(scoreIn, DEC); // same line
    
    display.display();

}

void highScore() {
    if (digitalRead(D4) == HIGH) // if Left, return to menu
    {
        state = 0;
    }

    // GUI
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);
    display.setCursor(0, 0);

    for (int i = size - 1; i >= 0; i--) {
        display.println(scoreList[i], DEC);
    }
            display.display();

}

void print_every_second()
{
    newGame();

}

void moveUp()
{
    if (yButton == 0) // can't down if not right/left yet
        yButton = -1;
    xButton = 0;
    
    if(choose_menu == 1)
        choose_menu = 1;
    else 
        choose_menu--;
}

void moveDown()
{
    if (yButton == 0)
        yButton = 1;
    xButton = 0;
    
    if(choose_menu == 3)
        choose_menu = 3;
    else 
        choose_menu++ ;
}

void moveRight()
{
    if (xButton == 0)
        xButton = 1;
    yButton = 0;
}

void moveLeft()
{
    if (xButton == 0)
        xButton = -1;
    yButton = 0;
}


